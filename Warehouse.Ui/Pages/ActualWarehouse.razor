@page "/"
@using Warehouse.Ui.Model
@using Warehouse.Ui.Services
@inject HttpService HttpService
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject NavigationManager NavigationManager

<div align="center" class="container pb-5">
    <div class="row">
        <h3>Склады</h3>
        <br /><br />

        <div class="border border-success py-2">
            <h4>Сводная ведомость складов:</h4>
            @if (_warehouses == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Имя склада</th>
                            <th>Номер площадки</th>
                            <th>Номер пикета</th>
                            <th>Груз на площадке(т)</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var warehouse in _warehouses)
                        {
                            @if (!warehouse.Areas.Any() && !warehouse.Pickets.Any())
                            {
                                <tr>
                                    <td>@warehouse.Name</td>
                                    <td>Отсутствует</td>
                                    <td>Отсутствует</td>
                                    <td>Отсутствеут</td>
                                </tr>
                            }
                            else if (!warehouse.Areas.Any() && warehouse.Pickets.Any())
                            {
                                @foreach (var picket in warehouse.Pickets)
                                {
                                    <tr>
                                        <td>@warehouse.Name</td>
                                        <td>Отсутствует</td>
                                        <td>@picket.Name</td>
                                        <td>Отсутствует</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                @foreach (var picket in warehouse.Pickets)
                                {
                                    <tr>
                                        <td>@warehouse.Name</td>
                                        <td>@GetAreaNameByPicket(warehouse, picket)</td>
                                        <td>@picket.Name</td>
                                        <td>@GetAreaCargoByPicket(warehouse, picket)</td>
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
            }
        </div>

        @* Список складов *@
        <div class="border border-success py-2">
            <h4>Склады</h4>
            <RadzenDataGrid @ref="_warehouseDataGrid" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                            Data="@_warehouses" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" @bind-Value="@_selectedWarehouses">
                <Columns>
                    <RadzenDataGridColumn Property="@nameof(WarehouseResponse.Id)" Filterable="false" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn Property="@nameof(WarehouseResponse.Name)" Title="Имя склада" Frozen="true" Width="160px" />
                </Columns>
            </RadzenDataGrid>
            <RadzenStack class="py-2" Gap="1rem" AlignItems="AlignItems.Center">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap">
                    <RadzenButton Shade="Shade.Light" Click="@(args => OnAddWarehouse())" Text="Добавить склад" ButtonStyle="ButtonStyle.Success" />
                    @* <RadzenButton Shade="Shade.Light" Click=@(args => OnDeleteWarehouse()) Text="Удалить склад" ButtonStyle="ButtonStyle.Danger" /> *@
                </RadzenStack>
            </RadzenStack>
        </div>

        @* Список пикетов *@
        <div class="border border-success py-2">
            <h4 class="pt-2">Пикеты выбранного склада</h4>
            <RadzenDataGrid @ref="_picketDataGrid" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                            Data="@_selectedWarehouses?.FirstOrDefault()?.Pickets" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Multiple" @bind-Value="@_selectedPickets">
                <Columns>
                    <RadzenDataGridColumn Property="@nameof(PicketResponse.Id)" Filterable="false" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn Property="@nameof(PicketResponse.Name)" Title="Имя пикета" Frozen="true" Width="160px" />
                </Columns>
            </RadzenDataGrid>
            <RadzenStack class="py-2" Gap="1rem" AlignItems="AlignItems.Center">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap">
                    <RadzenButton Shade="Shade.Light" Click=@(args => OnAddPicket()) Text="Добавить пикет" ButtonStyle="ButtonStyle.Success" />
                    @* <RadzenButton Shade="Shade.Light" Click=@(args => OnDeleteWarehouse()) Text="Delete Picket" ButtonStyle="ButtonStyle.Danger" /> *@
                </RadzenStack>
            </RadzenStack>
        </div>

        @* Список площадок *@
        <div class="border border-success py-2">
            <h4>Площадки выбранного склада</h4>
            <RadzenDataGrid @ref="_areaDataGrid" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                            Data="@_selectedWarehouses?.FirstOrDefault()?.Areas" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" @bind-Value="@_selectedAreas">
                <Columns>
                    <RadzenDataGridColumn Property="@nameof(AreaResponse.Id)" Filterable="false" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn Property="@nameof(AreaResponse.Name)" Title="Имя площадки" Frozen="true" Width="160px" />
                    <RadzenDataGridColumn Property="@nameof(AreaResponse.CreateTime)" FormatString="{0:MM/dd/yy H:mm:ss}" Title="Дата и время создания" Frozen="true" Width="160px" />
                    @* {0:hh\\:mm\\:ss} *@
                </Columns>
            </RadzenDataGrid>
            <RadzenStack class="py-2" Gap="1rem" AlignItems="AlignItems.Center">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap">
                    <RadzenButton Shade="Shade.Light" Click=@(args => OnAddArea()) Text="Добавить площадку" ButtonStyle="ButtonStyle.Success" />
                    <RadzenButton Shade="Shade.Light" Click=@(args => OnDeleteArea()) Text="Удалить площадку" ButtonStyle="ButtonStyle.Danger" />
                </RadzenStack>
            </RadzenStack>
        </div>

        @* Список грузов *@
        <div class="border border-success py-2">
            <h4>Грузы площадок</h4>
            <RadzenDataGrid @ref="_cargoDataGrid" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                            Data="@_selectedWarehouses?.FirstOrDefault()?.Areas.Select(a => a.Cargo)" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" @bind-Value="@_selectedCargoes">
                <Columns>
                    <RadzenDataGridColumn Property="@nameof(CargoResponse.Id)" Filterable="false" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn Property="@nameof(CargoResponse.Weight)" Title="Вес груза" Frozen="true" Width="160px" />
                    <RadzenDataGridColumn Property="@nameof(CargoResponse.LoadTime)" Title="Дата погрузки" FormatString="{0:MM/dd/yy H:mm:ss}" Frozen="true" Width="160px" />
                </Columns>
            </RadzenDataGrid>
            <RadzenStack class="py-2" Gap="1rem" AlignItems="AlignItems.Center">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap">
                    <RadzenButton Shade="Shade.Light" Click=@(args => OnCreateCargo()) Text="Заменить груз" ButtonStyle="ButtonStyle.Success" />
                    <RadzenButton Shade="Shade.Light" Click=@(args => OnDeleteCargo()) Text="Удалить груз" ButtonStyle="ButtonStyle.Danger" />
                </RadzenStack>
            </RadzenStack>
        </div>

    </div>
</div>

@code {
    private IList<WarehouseResponse>? _warehouses;

    private IList<WarehouseResponse>? _selectedWarehouses;
    private IList<PicketResponse>? _selectedPickets;
    private IList<AreaResponse>? _selectedAreas;
    private IList<CargoResponse>? _selectedCargoes;

    private const string AddWarehouseTitle = "Добавление склада";
    private const string AddPicketTitle = "Добавление пикета";
    private const string AddAreaTitle = "Добавление площадки";
    private const string DeleteAreaTitle = "Удаление площадки";
    private const string CreateCargoTitle = "Добавление груза";
    private const string DeleteCargoTitle = "Удаление груза";

    private string _newWarehouseName = string.Empty;
    private string _newPicketName = string.Empty;
    private RadzenDataGrid<WarehouseResponse>? _warehouseDataGrid;
    private RadzenDataGrid<PicketResponse>? _picketDataGrid;
    private RadzenDataGrid<AreaResponse>? _areaDataGrid;
    private RadzenDataGrid<CargoResponse>? _cargoDataGrid;

    private DateTime? _areaDeleteTime = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        _warehouses = await HttpService.GetWarehousesAsync();
    }

    private string GetAreaNameByPicket(WarehouseResponse warehouse, PicketResponse picket)
    {
        var area = warehouse.Areas.FirstOrDefault(a => a.Pickets.Any(p => p.Id == picket.Id));

        return area?.Name ?? "Отсутствует";
    }

    private string GetAreaCargoByPicket(WarehouseResponse warehouse, PicketResponse picket)
    {
        var area = warehouse.Areas.FirstOrDefault(a => a.Pickets.Any(p => p.Id == picket.Id));

        return area?.Cargo?.Weight ?? "Отсутствует";
    }

    private async Task ReloadPagesData()
    {
        _warehouses = await HttpService.GetWarehousesAsync();
        _selectedWarehouses = null;
        _selectedPickets = null;
        _selectedAreas = null;
        _selectedCargoes = null;

        // await _picketDataGrid.Reload();
        // NavigationManager.NavigateTo(NavigationManager.Uri);
    }

    private async Task<bool> ShowNewWarehouseDialog()
    {
        var result = await DialogService.OpenAsync("Добавить склад", ds =>
    @<RadzenStack Gap="1.5rem">
        <RadzenCard>
            <RadzenTextArea Placeholder="Введите имя..." @bind-Value=@_newWarehouseName Style="width: 100%" aria-label="Добавить склад" />
        </RadzenCard>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="width: 80px;" />
                <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
    );

        return result is true;
    }

    private async Task<bool> ShowNewPicketDialog()
    {
        var result = await DialogService.OpenAsync("Добавить пикет", ds =>
    @<RadzenStack Gap="1.5rem">
        <RadzenCard>
            <RadzenTextArea Placeholder="Введите имя..." @bind-Value=@_newPicketName Style="width: 100%" aria-label="Добавить пикет" />
        </RadzenCard>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="width: 80px;" />
                <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
    );

        return result is true;
    }

    private async Task<bool> ShowDeleteAreaDialog()
    {
        var result = await DialogService.OpenAsync("Удаление площадки", ds =>
    @<RadzenStack Gap="1.5rem">
        <RadzenCard>
            <RadzenStack class="py-2" Gap="1rem" AlignItems="AlignItems.Center">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Gap="0.5rem" class="rz-p-12">
                    <RadzenLabel Text="Выбрать дату и время" Component="DatePickerWithTime" />
                    <RadzenDatePicker @bind-Value=@_areaDeleteTime ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm:ss" Name="DatePickerWithTime" />
                </RadzenStack>
            </RadzenStack>
        </RadzenCard>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="width: 80px;" />
                <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
    );

        return result is true;
    }

    private async Task OnAddWarehouse()
    {
        try
        {
            var result = await ShowNewWarehouseDialog();

            if (result)
            {
                if (!string.IsNullOrEmpty(_newWarehouseName))
                {
                    var newWarehouse = await HttpService.CreateWarehouseAsync(new WarehouseResponse
                        {
                            Name = _newWarehouseName,
                            Areas = new List<AreaResponse>(),
                            Pickets = new List<PicketResponse>()
                        });
                    if (newWarehouse != null)
                    {
                        await ReloadPagesData();

                        SendNotificationMessage(AddWarehouseTitle, "Склад добавлен");
                    }
                }
                else
                {
                    SendNotificationMessage(AddWarehouseTitle, "Не удалось добавить склад! Имя не должно быть пустым!", NotificationSeverity.Error);
                }
            }
        }
        catch
        {
            SendNotificationMessage(AddWarehouseTitle, "Не удалось добавить склад!", NotificationSeverity.Error);
        }

    }

    private async Task OnAddPicket()
    {
        try
        {
            if (_selectedWarehouses == null
                || !_selectedWarehouses!.Any())
            {
                SendNotificationMessage(AddWarehouseTitle, "Не удалось добавить пикет! Должен быть выбран склад!", NotificationSeverity.Error);
                return;
            }

            var result = await ShowNewPicketDialog();

            if (result
                && !string.IsNullOrEmpty(_newPicketName)
                && _selectedWarehouses!.First().Pickets.All(p => p.Name.ToUpper() != _newPicketName.ToUpper()))
            {
                if (result)
                {
                    var newPicket = await HttpService.CreatePicketAsync(new PicketResponse
                        {
                            Name = _newPicketName,
                            WarehouseId = _selectedWarehouses.First().Id
                        });

                    if (newPicket != null)
                    {
                        await ReloadPagesData();

                        SendNotificationMessage(AddPicketTitle, "Пикет добавлен");
                    }
                }
                else
                {
                    SendNotificationMessage(AddWarehouseTitle, "Не удалось добавить пикет!", NotificationSeverity.Error);
                }
            }
            else
            {
                SendNotificationMessage(AddWarehouseTitle, "Не удалось добавить пикет! Имя должно быть уникальным!", NotificationSeverity.Error);
            }
        }
        catch
        {
            SendNotificationMessage(AddWarehouseTitle, "Не удалось добавить пикет!", NotificationSeverity.Error);
        }
    }

    private void OnAddArea()
    {
        SendNotificationMessage(AddAreaTitle, "Площадка добавлена");
    }

    private async Task OnDeleteArea()
    {
        if (_selectedAreas == null || !_selectedAreas.Any())
        {
            SendNotificationMessage(DeleteAreaTitle, "Необходимо выбрать площадку!");
            return;
        }

        var selectedArea = _selectedAreas.First();

        try
        {
            var result = await ShowDeleteAreaDialog();

            if (result)
            {
                if (_areaDeleteTime < selectedArea.CreateTime)
                {
                    SendNotificationMessage(DeleteAreaTitle, "Время удаления площадки должно быть позже ее создания");
                    return;
                }

                selectedArea.DeleteTime = _areaDeleteTime!.Value;

                await HttpService.DeleteAreaAsync(selectedArea);

                await ReloadPagesData();

                SendNotificationMessage(AddPicketTitle, "Площадка и груз удалены!");
            }
        }
        catch
        {
            SendNotificationMessage(DeleteAreaTitle, "Не удалось удалить площадку!");
        }
    }

    private void OnCreateCargo()
    {
        SendNotificationMessage(CreateCargoTitle, "Груз добавлен");
    }

    private void OnDeleteCargo()
    {
        SendNotificationMessage(DeleteCargoTitle, "Груз удален");
    }

    private void SendNotificationMessage(string title, string message, NotificationSeverity severity = NotificationSeverity.Info)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = title, Detail = message });
    }

}

